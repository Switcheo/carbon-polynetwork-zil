scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils BoolUtils
library SwitcheoToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeIsNotOwner
| CodeInvalidAddress
| CodeIsNotSelf
| CodeNotOwner
| CodeNotPendingOwner
| CodePendingOwnerNotEmpty

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender                   => Int32 -1
      | CodeInsufficientFunds          => Int32 -2
      | CodeInsufficientAllowance      => Int32 -3
      | CodeIsNotOwner                 => Int32 -4
      | CodeInvalidAddress             => Int32 -5
      | CodeIsNotSelf                  => Int32 -6
      | CodeNotOwner                   => Int32 -7
      | CodeNotPendingOwner            => Int32 -8
      | CodePendingOwnerNotEmpty       => Int32 -9
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0
let zero_addr = 0x0000000000000000000000000000000000000000
let true = True

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

let some_addr = 
  fun (addr: ByStr20) =>
  Some {ByStr20} addr

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract SwitcheoToken
(
  name: String,
  symbol: String,
  contract_owner: ByStr20,
  decimals: Uint32,
  init_supply: Uint128,
  init_lockproxy: ByStr20
)
with
  (* init supply should be zero *)
  let a = builtin eq init_supply zero in
  let b = builtin eq init_lockproxy zero_addr in
  (* lock proxy address should not be zero address *)
  let c = negb b in
    andb a c
=>

(* Mutable fields *)

field total_supply : Uint128 = init_supply

field balances: Map ByStr20 Uint128 = Emp ByStr20 Uint128

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

field lock_proxy: ByStr20 = init_lockproxy

field current_owner: ByStr20 = contract_owner

field pending_owner: ByStr20 = zero_addr

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure IsOwner(address: ByStr20)
  owner <- current_owner;
  is_owner = builtin eq address owner;
  match is_owner with
  | True =>
  | False =>
    err = CodeIsNotOwner;
    ThrowError err
  end
end

procedure IsPendingOwner(address: ByStr20)
  current_pending_owner <- pending_owner;
  is_pending_owner = builtin eq current_pending_owner address;
  match is_pending_owner with
  | True =>
  | False =>
    err = CodeNotPendingOwner;
    ThrowError err
  end
end

procedure NoPendingOwner()
  current_pending_owner <- pending_owner;
  is_pending_owner_empty = builtin eq current_pending_owner zero_addr;
  match is_pending_owner_empty with
  | False =>
    err = CodePendingOwnerNotEmpty;
    ThrowError err
  | True =>
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

procedure ValidateNonZeroAddress(address: ByStr20)
  is_zero_addr = builtin eq address zero_addr;
  match is_zero_addr with
  | True =>
    err = CodeInvalidAddress;
    ThrowError err
  | False =>
  end
end

procedure IsSelf(address: ByStr20)
  is_self = builtin eq address _this_address;
  match is_self with
  | True =>
  | False =>
    err = CodeIsNotSelf;
    ThrowError err
  end
end

(* @dev Creates amount tokens and assigns them to account, increasing the tital supply *)
procedure AuthorizedMint(address: ByStr20, amount: Uint128)
  ValidateNonZeroAddress address;
  current_supply <- total_supply;
  new_supply = builtin add current_supply amount;
  total_supply := new_supply;

  get_bal <- balances[address];
  new_bal = match get_bal with
  | Some bal => builtin add bal amount
  | None => amount
  end;
  balances[address] := new_bal;
  e = {_eventname: "MintSuccess"; minter: _sender; recipient: address; amount: amount};
  event e
end

(* @dev Destorys amount token from address, reducing the total supply *)
procedure AuthorizedBurnIfSufficientBalance(address: ByStr20, amount: Uint128)
  ValidateNonZeroAddress address;
  current_supply <- total_supply;
  new_supply = builtin sub current_supply amount;
  total_supply := new_supply;

  o_from_bal <- balances[address];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    new_from_bal = builtin sub bal amount;
    balances[address] := new_from_bal;

    e = { _eventname : "BurnSuccess"; burner : _sender; burn_account : address; amount : amount };
    event e
  | False =>
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

procedure MintIfLockProxy(address: ByStr20, amount: Uint128)
  lp <- lock_proxy;
  is_lp = builtin eq lp address;
  match is_lp with
  | True =>
    AuthorizedMint address amount
  | False =>
  end
  
end

procedure BurnIfLockProxy(address: ByStr20, amount: Uint128)
  lp <- lock_proxy;
  is_lp = builtin eq lp address;
  match is_lp with
  | True =>
    msg_to_burn = {_tag : "Burn"; _recipient : _this_address; _amount : zero; 
                  burn_account : address; amount : amount};
    msgs = one_msg msg_to_burn;
    send msgs
  | False =>
  end
end


(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Transfers contract ownership to a new address. The new address must call the AcceptOwnership transition to finalize the transfer. *)
(* @param new_owner: Address of the new current_owner.                                                                                    *)
transition TransferOwnership(new_owner: ByStr20)
  IsOwner _sender;
  pending_owner := new_owner;
  e = {_eventname : "OwnershipTransferInitiated"; current_owner : _sender; pending_owner : new_owner};
  event e
end

(* @dev: Finalizes transfer of contract ownership. Must be called by the new current_owner. *)
transition AcceptOwnership()
  IsPendingOwner _sender;
  previous_current_owner <- current_owner;
  current_owner := _sender;
  pending_owner := zero_addr;
  e = {_eventname : "OwnershipTransferAccepted"; previous_current_owner : previous_current_owner; current_owner : _sender};
  event e
end

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  MintIfLockProxy _sender amount;
  AuthorizedMoveIfSufficientBalance _sender to amount;
  BurnIfLockProxy to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    BurnIfLockProxy to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero; 
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero; 
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end

(* @dev: Burn existing tokens. Only contract self can burn.                      *)
(* @param burn_account: Address of the token_owner whose balance is to decrease.  *)
(* @param amount:       Number of tokens to be burned.                            *)
transition Burn(burn_account: ByStr20, amount: Uint128)
  IsSelf _sender;
  AuthorizedBurnIfSufficientBalance burn_account amount;
  (* Provide the sender the status of the burn. *)
  msg_call_back = { _tag: "BurnSuccessCallBack"; _recipient : _sender; _amount: zero;
                  burner: _sender; burn_account: burn_account; amount: amount };
  msgs = one_msg msg_call_back;
  send msgs
end

transition ChangeLockProxy(addr: ByStr20)
  IsOwner _sender;
  lock_proxy := addr;
  e = {_eventname : "ChangeLockProxy"; lockproxy : addr};
  event e
end

transition BurnSuccessCallBack(burner: ByStr20, burn_account: ByStr20, amount: Uint128)
end
